apiVersion: {{ template "prometheus.deployment.apiVersion" . }}
kind: Deployment
metadata:
  labels:
    {{- include "prometheus.server.labels" . | nindent 4 }}
  name: {{ template "prometheus.server.fullname" . }}
spec:
  selector:
    matchLabels:
      {{- include "prometheus.server.matchLabels" . | nindent 6 }}
  replicas: {{ .Values.server.replicaCount }}
  {{- if .Values.server.strategy }}
  strategy:
{{ toYaml .Values.server.strategy | trim | indent 4 }}
    {{ if eq .Values.server.strategy.type "Recreate" }}rollingUpdate: null{{ end }}
{{- end }}
  template:
    metadata:
      labels:
        {{- include "prometheus.server.labels" . | nindent 8 }}
        {{- if .Values.server.podLabels}}
        {{ toYaml .Values.server.podLabels | nindent 8 }}
        {{- end}}
    spec:
      serviceAccountName: {{ template "prometheus.serviceAccountName.server" . }}
      containers:
        - name: {{ template "prometheus.name" . }}-{{ .Values.server.name }}
          image: {{ include "repository" . }}/prometheus:{{ .Values.server.image.tag }}
          imagePullPolicy: "{{ .Values.server.image.pullPolicy }}"
          args:
          {{- if .Values.server.prefixURL }}
            - --web.route-prefix={{ .Values.server.prefixURL }}
          {{- end }}
          {{- if .Values.server.retention }}
            - --storage.tsdb.retention.time={{ .Values.server.retention }}
          {{- end }}
            - --config.file={{ .Values.server.configPath }}
            {{- if .Values.server.storagePath }}
            - --storage.tsdb.path={{ .Values.server.storagePath }}
            {{- else }}
            - --storage.tsdb.path={{ .Values.server.persistentVolume.mountPath }}
            {{- end }}
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
          {{- range .Values.server.extraFlags }}
            - --{{ . }}
          {{- end }}
          {{- range $key, $value := .Values.server.extraArgs }}
            - --{{ $key }}={{ $value }}
          {{- end }}
          {{- if .Values.server.baseURL }}
            - --web.external-url={{ .Values.server.baseURL }}
          {{- end }}
          ports:
            - containerPort: 9090
          readinessProbe:
            {{- if not .Values.server.tcpSocketProbeEnabled }}
            httpGet:
              path: {{ .Values.server.prefixURL }}/-/ready
              port: 9090
              scheme: {{ .Values.server.probeScheme }}
              {{- if .Values.server.probeHeaders }}
              httpHeaders:
              {{- range .Values.server.probeHeaders}}
              - name: {{ .name }}
                value: {{ .value }}
              {{- end }}
              {{- end }}
            {{- else }}
            tcpSocket:
              port: 9090
            {{- end }}
            initialDelaySeconds: {{ .Values.server.readinessProbeInitialDelay }}
            periodSeconds: {{ .Values.server.readinessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.server.readinessProbeTimeout }}
            failureThreshold: {{ .Values.server.readinessProbeFailureThreshold }}
            successThreshold: {{ .Values.server.readinessProbeSuccessThreshold }}
          livenessProbe:
            {{- if not .Values.server.tcpSocketProbeEnabled }}
            httpGet:
              path: {{ .Values.server.prefixURL }}/-/healthy
              port: 9090
              scheme: {{ .Values.server.probeScheme }}
              {{- if .Values.server.probeHeaders }}
              httpHeaders:
              {{- range .Values.server.probeHeaders}}
              - name: {{ .name }}
                value: {{ .value }}
              {{- end }}
              {{- end }}
            {{- else }}
            tcpSocket:
              port: 9090
            {{- end }}
            initialDelaySeconds: {{ .Values.server.livenessProbeInitialDelay }}
            periodSeconds: {{ .Values.server.livenessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.server.livenessProbeTimeout }}
            failureThreshold: {{ .Values.server.livenessProbeFailureThreshold }}
            successThreshold: {{ .Values.server.livenessProbeSuccessThreshold }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: {{ .Values.server.persistentVolume.mountPath }}
              subPath: "{{ .Values.server.persistentVolume.subPath }}"
            - mountPath: /etc/localtime
              name: localtime
    {{- if .Values.server.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.server.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.server.securityContext }}
      securityContext:
{{ toYaml .Values.server.securityContext | indent 8 }}
    {{- end }}
    {{- if .Values.server.tolerations }}
      tolerations:
{{ toYaml .Values.server.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.server.affinity }}
      affinity:
{{ toYaml .Values.server.affinity | indent 8 }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.server.terminationGracePeriodSeconds }}
      volumes:
        {{- include "mgr.localtime.volume" . | indent 8}}
        - name: config-volume
          configMap:
            name: {{ if .Values.server.configMapOverrideName }}{{ .Release.Name }}-{{ .Values.server.configMapOverrideName }}{{- else }}{{ template "prometheus.server.fullname" . }}{{- end }}
        - name: storage-volume
        {{- if .Values.server.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.server.persistentVolume.existingClaim }}{{ .Values.server.persistentVolume.existingClaim }}{{- else }}{{ template "prometheus.server.fullname" . }}{{- end }}
        {{- else }}
          emptyDir:
          {{- if .Values.server.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.server.emptyDir.sizeLimit }}
          {{- else }}
            {}
          {{- end -}}
        {{- end -}}
